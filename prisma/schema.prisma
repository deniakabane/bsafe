generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  session_id String @id
  admin_id   Int    @unique
  created_at DateTime @default(now())
  expires_at DateTime

  adminUser  AdminUser @relation(fields: [admin_id], references: [id], onDelete: Cascade)
}



model User {
  id                Int     @id @default(autoincrement())
  name              String  @db.VarChar(191)
  email             String  @unique @db.VarChar(191)
  phone             String  @unique @db.VarChar(191)
  password          String? @db.VarChar(191)
  national_id_number String? @unique @db.VarChar(191)
  gender            String? @db.VarChar(50)
  blood_type        String? @db.VarChar(10)
  birth_place       String? @db.VarChar(191)
  birth_date        DateTime?
  religion          String? @db.VarChar(50)
  domicile_province Int?  
  domicile_city     Int?  
  last_education    String? @db.VarChar(191)
  full_address      String? @db.VarChar(191)
  region           String? @db.VarChar(50) 
  education_level   String? @db.VarChar(50)
  university_name   String? @db.VarChar(191) 
  diploma_number    String? @db.VarChar(191) 
  referensi   String? @db.VarChar(191) 
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  userCompanies      UserCompany[]
  userTrainings      UserTraining[]
  userSkps      UserSkp[]
  historyPayment    HistoryPayment[]
  masterDocument    MasterDocument[]
  userDocument    UserDocument[]
}

enum adminType {
  ADMIN
  SUPER_ADMIN
}


model AdminUser {
  id    Int    @id @default(autoincrement())
  name  String  @db.VarChar(191)
  email String  @unique @db.VarChar(191)
  phone String  @unique @db.VarChar(191)
  password       String  @db.VarChar(191)
  full_address       String  @db.VarChar(191)
  national_id_number String  @db.VarChar(191)
  gender             String?  @db.VarChar(50)
  blood_type         String?  @db.VarChar(10)
  birth_place        String?  @db.VarChar(191)
  birth_date         DateTime?
  // level              String  @default("admin")
  level              adminType
  religion           String?  @db.VarChar(50)
  domicile_province  String?  @db.VarChar(191)
  domicile_city      String?  @db.VarChar(191)
  last_education     String?  @db.VarChar(191)
  created_at       DateTime  @default(now()) @map("created_at")
  updated_at       DateTime  @updatedAt @map("updated_at") 

   session Session[]
  @@map("admin_user")
}

enum statusTraining {
  CANCEL
  DRAFT
  PESERTA
}

model UserTraining {
  id              Int         @id @default(autoincrement())
  user_id         Int    
  training_id     Int    
  certificate_no  String?     @db.VarChar(191)  
  theme           String?     @db.VarChar(191) 
  status          statusTraining 
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt 

  user            User        @relation(fields: [user_id], references: [id])
  training        Training    @relation(fields: [training_id], references: [id])
  details         UserTrainingDetail? 

  @@index([user_id])  
  @@index([training_id])  
  @@index([certificate_no])  
  @@map("user_training")
}

model UserTrainingDetail {
  id                Int     @id @default(autoincrement())
  user_training_id  Int     @unique 
  company_name      String? @db.VarChar(191) 
  company_address   String? @db.VarChar(191) 
  institution       String? @db.VarChar(191) 
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  userTraining          UserTraining     @relation(fields: [user_training_id], references: [id], onDelete: Cascade)

  @@map("user_training_detail")
}


model UserCompany {
  id             Int      @id @default(autoincrement())
  user_id        Int
  company_id     Int
  still_working  Boolean @default(true) 
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  company       Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)


  @@unique([user_id, company_id]) 
  @@index([user_id])
  @@index([company_id])

  @@map("user_company")
}

model Company {
  id               Int      @id @default(autoincrement())
  logo             String?  @db.VarChar(255)
  name             String   @unique @db.VarChar(191)
  address          String   @db.Text
  email            String   @unique @db.VarChar(191)
  phone            String   @unique @db.VarChar(20)
  company_wa       String?  @db.VarChar(20)
  hrd_wa           String?  @db.VarChar(20)
  province         String?   @db.VarChar(100)
  city             String?   @db.VarChar(100)
  finance_pic      String?  @db.VarChar(191)
  finance_phone    String?  @db.VarChar(20)
  created_at       DateTime  @default(now()) @map("created_at")
  updated_at       DateTime  @updatedAt @map("updated_at")
  userCompanies  UserCompany[]
}

model Training {
  id          Int       @id @default(autoincrement())
  name        String    
  slug        String   
  image_id    Int 
  description String?   @db.LongText
  start_date  DateTime?
  end_date    DateTime?
  price       Int?
  schema_id   Int      
  status     Boolean  @default(true) 
  created_at  DateTime  @default(now()) @map("created_at")
  updated_at  DateTime  @updatedAt @map("updated_at")
  schema      Schema    @relation(fields: [schema_id], references: [id])
  userTrainings UserTraining[]
  historyPayment HistoryPayment[] 
  productAppealTrainings ProductAppealTraining[] 
  // masterDocument    MasterDocument[]
  userDocument     UserDocument[]

  @@index([schema_id])
}

enum SkpType {
  SKP
  LISENSI
}

model Skp {
  id          Int       @id @default(autoincrement())
  name        String    
  slug        String   
  image_id    Int 
  description String?   @db.LongText
  start_date  DateTime?
  end_date    DateTime?
  price       Int?
  type        SkpType 
  schema_id   Int      
  status     Boolean  @default(true) 
  created_at  DateTime  @default(now()) @map("created_at")
  updated_at  DateTime  @updatedAt @map("updated_at")
  schema      Schema    @relation(fields: [schema_id], references: [id])
  userSkps UserSkp[] 
  historyPayment HistoryPayment[] 
  // masterDocument    MasterDocument[]
  userDocument    UserDocument[]
  @@index([schema_id])
}


model UserSkp {
  id              Int    @id @default(autoincrement())
  user_id         Int    
  skp_id     Int    
  certificate_no  String? @db.VarChar(191)  
  theme           String? @db.VarChar(191) 
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt 

  user     User     @relation(fields: [user_id], references: [id])
  skp Skp @relation(fields: [skp_id], references: [id])

  @@index([user_id])  
  @@index([skp_id])  
  @@index([certificate_no])  

  @@map("user_skp")
}


model Schema {
  id              Int       @id @default(autoincrement())
  schema_group_id Int
  name            String    
  slug            String    
  image_id        Int
  description     String?
  seo_link        String?
  created_at      DateTime  @default(now()) @map("created_at")
  updated_at      DateTime  @updatedAt @map("updated_at")
  schemaGroup     SchemaGroup? @relation(fields: [schema_group_id], references: [id])
  
  trainings      Training[]
  skps      Skp[]

  @@index([schema_group_id])
}

model SchemaGroup {
  id          Int       @id @default(autoincrement())
  name        String     
  slug        String    
  description String?
  created_at  DateTime  @default(now()) @map("created_at")
  updated_at  DateTime  @updatedAt @map("updated_at")

  schemas     Schema[]

  @@map("schema_group")
}

model DocumentType {
  id   Int    @id @default(autoincrement())
  name String @unique 

  userDocument UserDocument[]
  @@map("document_type")
}

model MasterDocument {
  id          Int          @id @default(autoincrement())
  user_id     Int
  name        String       @db.VarChar(191) 
  url         String       @db.Text         
  type        String       @db.VarChar(50)  
  status      Boolean      @default(true) 
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  user        User?        @relation(fields: [user_id], references: [id])
  userDocument     UserDocument[]

  @@index([user_id])
  @@map("master_document")
}

model UserDocument {
  id             Int      @id @default(autoincrement())
  user_id        Int
  document_id    Int
  type_id        Int
  training_id    Int?
  skp_id         Int?
  created_at    DateTime @default(now())
  updated_at  DateTime @updatedAt

  user           User @relation(fields: [user_id], references: [id])
  document       MasterDocument @relation(fields: [document_id], references: [id])
  type           DocumentType @relation(fields: [type_id], references: [id])
  training       Training? @relation(fields: [training_id], references: [id])
  skp            Skp? @relation(fields: [skp_id], references: [id])

  @@index([training_id])
  @@index([skp_id])
  @@unique([user_id, document_id, type_id, training_id, skp_id])
  @@map("user_document")
}



enum ResellerType {
  INTERNAL
  EXTERNAL
}

enum PaymentStatus {
  PAID
  UNPAID
  DP
}

model Reseller {
  id          Int          @id @default(autoincrement())
  name        String?       @db.VarChar(191)
  admin_id    Int?  @unique
  type        ResellerType
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  historyPayment    HistoryPayment[]

  @@index([admin_id])
  @@index([type])
}

model HistoryPayment {
  id          Int      @id @default(autoincrement())
  user_id     Int
  training_id Int?
  appeal_id   Int?
  skp_id      Int?
  nominal     Int?
  proof_of_tf Int?   
  reseller_id Int?
  status      PaymentStatus
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user     User?     @relation(fields: [user_id], references: [id])
  training Training? @relation(fields: [training_id], references: [id])
  reseller Reseller?     @relation(fields: [reseller_id], references: [id])
  skp Skp?     @relation(fields: [skp_id], references: [id])
  

  @@index([user_id])
  @@index([training_id])
  @@index([reseller_id])
  @@index([status])
  @@map("history_payment")
}

model categoryCertificate {
  id     Int     @id @default(autoincrement())
  name   String  @db.VarChar(191)
  slug   String   
  description String?  @db.LongText
  status     Boolean  @default(true) 
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  certificate Certificate[] 

  @@map("category_certificate")
}

model Certificate {
  id     Int     @id @default(autoincrement())
  name   String  @db.VarChar(191)
  slug   String   
  certificate_id Int
  price Int
  description String?  @db.LongText
  status     Boolean  @default(true) 
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  certificate categoryCertificate @relation(fields: [certificate_id], references: [id])
  
  @@index([certificate_id])
  @@map("certificate")
}

model ProductAppeal {
  id     Int  @id @default(autoincrement())
  name   String  @db.VarChar(191)
  price  Float
  status     Boolean  @default(true) 
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  productAppealTrainings ProductAppealTraining[] 
  @@map("product_appeal")
}

enum ProductAppealType {
  TRAINING
  OTHER
}

model ProductAppealTraining {
  id   Int  @id @default(autoincrement())
  training_id  Int
  appeal_id   Int
  type      ProductAppealType @default(TRAINING)
  status     Boolean  @default(true) 
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

   training   Training   @relation(fields: [training_id], references: [id])
  appeal     ProductAppeal @relation(fields: [appeal_id], references: [id])

  @@index([training_id])
  @@index([appeal_id])
  @@map("product_appeal_training")
}
