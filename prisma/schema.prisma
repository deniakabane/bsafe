generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id    Int    @id @default(autoincrement())
  name  String  @db.VarChar(191)
  email String  @unique @db.VarChar(191)
  phone String  @unique @db.VarChar(191)
  password       String  @db.VarChar(191)
  full_address       String  @db.VarChar(191)
  national_id_number String  @unique @db.VarChar(191)
  gender             String  @db.VarChar(50)
  blood_type         String  @db.VarChar(10)
  birth_place        String  @db.VarChar(191)
  birth_date         DateTime
  religion           String  @db.VarChar(50)
  domicile_province  String  @db.VarChar(191)
  domicile_city      String  @db.VarChar(191)
  last_education     String  @db.VarChar(191)
  registration_type  String  @db.VarChar(191) 
  created_at       DateTime  @default(now()) @map("created_at")
  updated_at       DateTime  @updatedAt @map("updated_at")

    userCompanies      UserCompany[]
      userTrainings      UserTraining[]
      userSkps      UserSkp[]

}

model AdminUser {
  id    Int    @id @default(autoincrement())
  name  String  @db.VarChar(191)
  email String  @unique @db.VarChar(191)
  phone String  @unique @db.VarChar(191)
  password       String  @db.VarChar(191)
  full_address       String  @db.VarChar(191)
  national_id_number String  @db.VarChar(191)
  gender             String  @db.VarChar(50)
  blood_type         String  @db.VarChar(10)
  birth_place        String  @db.VarChar(191)
  birth_date         DateTime
  level              String  @default("admin")
  religion           String  @db.VarChar(50)
  domicile_province  String  @db.VarChar(191)
  domicile_city      String  @db.VarChar(191)
  last_education     String  @db.VarChar(191)
  registration_type  String  @db.VarChar(191)
  created_at       DateTime  @default(now()) @map("created_at")
  updated_at       DateTime  @updatedAt @map("updated_at") 
  
  @@map("admin_user")
}

model UserTraining {
  id              Int    @id @default(autoincrement())
  user_id         Int    
  training_id     Int    
  certificate_no  String @db.VarChar(191)  
  theme           String @db.VarChar(191) 
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt 

  user     User     @relation(fields: [user_id], references: [id])
  training Training @relation(fields: [training_id], references: [id])


  @@index([user_id])  
  @@index([training_id])  
  @@index([certificate_no])  

  @@map("user_training")
}


model UserCompany {
  id             Int      @id @default(autoincrement())
  user_id        Int
  company_id     Int
  still_working  Boolean @default(true) 
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  company       Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)


  @@unique([user_id, company_id]) 
  @@index([user_id])
  @@index([company_id])

  @@map("user_company")
}

model Company {
  id               Int      @id @default(autoincrement())
  logo             String?  @db.VarChar(255)
  name             String   @unique @db.VarChar(191)
  address          String   @db.Text
  email            String   @unique @db.VarChar(191)
  phone            String   @unique @db.VarChar(20)
  company_wa       String?  @db.VarChar(20)
  hrd_wa           String?  @db.VarChar(20)
  province         String?   @db.VarChar(100)
  city             String?   @db.VarChar(100)
  finance_pic      String?  @db.VarChar(191)
  finance_phone    String?  @db.VarChar(20)
  created_at       DateTime  @default(now()) @map("created_at")
  updated_at       DateTime  @updatedAt @map("updated_at")
  userCompanies  UserCompany[]
}

model Training {
  id          Int       @id @default(autoincrement())
  name        String    
  slug        String   
  image_id    Int 
  description String?   @db.LongText
  start_date  DateTime?
  end_date    DateTime?
  price       Int?
  schema_id   Int      
  status     Boolean  @default(true) 
  created_at  DateTime  @default(now()) @map("created_at")
  updated_at  DateTime  @updatedAt @map("updated_at")
  schema      Schema    @relation(fields: [schema_id], references: [id])
  userTrainings UserTraining[] 
  productAppealTrainings ProductAppealTraining[] 

  @@index([schema_id])
}

enum SkpType {
  SKP
  LISENSI
}

model Skp {
  id          Int       @id @default(autoincrement())
  name        String    
  slug        String   
  image_id    Int 
  description String?   @db.LongText
  start_date  DateTime?
  end_date    DateTime?
  price       Int?
  type        SkpType 
  schema_id   Int      
  status     Boolean  @default(true) 
  created_at  DateTime  @default(now()) @map("created_at")
  updated_at  DateTime  @updatedAt @map("updated_at")
  schema      Schema    @relation(fields: [schema_id], references: [id])
  userSkps UserSkp[] 

  @@index([schema_id])
}


model UserSkp {
  id              Int    @id @default(autoincrement())
  user_id         Int    
  skp_id     Int    
  certificate_no  String @db.VarChar(191)  
  theme           String @db.VarChar(191) 
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt 

  user     User     @relation(fields: [user_id], references: [id])
  skp Skp @relation(fields: [skp_id], references: [id])

  @@index([user_id])  
  @@index([skp_id])  
  @@index([certificate_no])  

  @@map("user_skp")
}


model Schema {
  id              Int       @id @default(autoincrement())
  schema_group_id Int
  name            String    
  slug            String    
  image_id        Int
  description     String?
  seo_link        String?
  created_at      DateTime  @default(now()) @map("created_at")
  updated_at      DateTime  @updatedAt @map("updated_at")
  schemaGroup     SchemaGroup? @relation(fields: [schema_group_id], references: [id])
  
  trainings      Training[]
  skps      Skp[]

  @@index([schema_group_id])
}

model SchemaGroup {
  id          Int       @id @default(autoincrement())
  name        String     
  slug        String    
  description String?
  created_at  DateTime  @default(now()) @map("created_at")
  updated_at  DateTime  @updatedAt @map("updated_at")

  schemas     Schema[]

  @@map("schema_group")
}

model MasterDocument {
  id         Int     @id @default(autoincrement())
  user_id    Int
  name       String  @db.VarChar(191)
  url        String  @db.Text
  type       String  @db.VarChar(50) 
  status     Boolean  @default(true) 
  training_id Int?   
  skp_id     Int?    
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
  @@index([skp_id])
  @@index([training_id])

  @@map("master_document")

}

enum ResellerType {
  internal
  external
}

enum PaymentStatus {
  paid
  unpaid
  dp
}

model Reseller {
  id          Int          @id @default(autoincrement())
  name        String?       @db.VarChar(191)
  admin_id    Int?  @unique
  type        ResellerType
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  @@index([admin_id])
  @@index([type])
}

model HistoryPayment {
  id          Int      @id @default(autoincrement())
  user_id     Int
  training_id Int
  nominal     Decimal  @db.Decimal(10,2) 
  proof_of_tf String?  @db.VarChar(255)   // bukti tf
  reseller_id Int?
  status      String   @db.VarChar(20)   
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([user_id])
  @@index([training_id])
  @@index([reseller_id])
  @@index([status])
  @@map("history_payment")
}

model ProductAppeal {
  id     Int     @id @default(autoincrement())
  name   String  @db.VarChar(191)
  price  Float
  status     Boolean  @default(true) 
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  productAppealTrainings ProductAppealTraining[] 
  @@map("product_appeal")
}

enum ProductAppealType {
  Training
  Other
}

model ProductAppealTraining {
  id   Int  @id @default(autoincrement())
  training_id  Int
  appeal_id   Int
  type      ProductAppealType @default(Training)
  status     Boolean  @default(true) 
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

   training   Training   @relation(fields: [training_id], references: [id])
  appeal     ProductAppeal @relation(fields: [appeal_id], references: [id])

  @@index([training_id])
  @@index([appeal_id])
  @@map("product_appeal_training")
}
